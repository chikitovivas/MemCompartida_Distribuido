 
#include "libreria_cliente.h"

	/*  void conexion(int argc, char *argv[])
	 *  Realiza la conexion con el servidor, 
	 *  recibe por parametros los datos introducidos por el usuario 
	 *  (numero de parametos y por el otro argumento ip puerto y tipo de protocolo)
	 */
		void conexion(int argc, char *argv[]){
			int flag=1;
			   if (argc !=4) { 
				  /* esto es porque nuestro programa sólo necesitará un
				  argumento, (la IP) */
				  printf("\n\tEjecute: ./nombre IP PUERTO PROTOCOLO");
				  printf("\n\t\tEj: ./cliente 127.0.0.1 7000 TCP");
				  printf("\n\t\tEj: ./cliente 127.0.0.1 7300 UDP\n\n");
				  exit(-1);
			   }


			   if (atoi(argv[2])==0){
				  printf("\n\tIngrese puerto valido>\n");
				  printf("\n\tEjecute: ./nombre IP PUERTO PROTOCOLO");
				  printf("\n\t\tEj: ./cliente 127.0.0.1 7000 TCP");
				  printf("\n\t\tEj: ./cliente 127.0.0.1 7300 UDP\n\n");
				  exit(-1);
				}
			   if(strcmp(argv[3],"TCP") != 0 && strcmp(argv[3],"UDP") != 0){
				  printf("\n\tIngrese protocolo de conexion: 'TCP' o 'UDP' \n ");
				  printf("\n\tEjecute: ./nombre IP PUERTO PROTOCOLO");
				  printf("\n\t\tEj: ./cliente 127.0.0.1 7000 TCP");
				  printf("\n\t\tEj: ./cliente 127.0.0.1 7300 UDP\n\n");
				  exit(-1);
			   }
			   
			   if (strcmp(argv[3],"UDP") == 0){
				 tipo_conex=1;
				 printf("\n\tConexión UDP\n");
			   }
			   else 
				 if (strcmp(argv[3],"TCP") == 0){
					tipo_conex=2;
				  	printf("\n\tConexión TCP\n");
				 }
				
			   int numbytes;       
			   /* ficheros descriptores */

			   char buf[MAXDATASIZE];  
			   /* en donde es almacenará el texto recibido */

			   struct hostent *he;         
			   /* estructura que recibirá información sobre el nodo remoto */

			   struct sockaddr_in server;  
			   /* información sobre la dirección del servidor */
			   

			   if ((he=gethostbyname(argv[1]))==NULL){       
				  /* llamada a gethostbyname() */
				  printf("gethostbyname() error\n");
				  exit(-1);
			   }
	
			   if ((fd=socket(AF_INET, SOCK_STREAM, 0))==-1){  
				  /* llamada a socket() */
				  printf("socket() error\n");
				  exit(-1);
			   }

			   server.sin_family = AF_INET;
			   server.sin_port = htons(atoi(argv[2])); 
			   /* htons() es necesaria nuevamente ;-o */
			   server.sin_addr = *((struct in_addr *)he->h_addr);  
			   /*he->h_addr pasa la información de ``*he'' a "h_addr" */
			   bzero(&(server.sin_zero),8);

			   if(connect(fd, (struct sockaddr *)&server,
				  sizeof(struct sockaddr))==-1){ 
				  /* llamada a connect() */
				  printf("connect() error\n");
				  exit(-1);
			   }	

		} //fin conexion


	/*  void enviar(void *cadena)
	 *  Funcion de envio de mensajes al servidor
	 *  recibe por parametro el dato a enviar
	 */
		void enviar(void *cadena, long int tamano){
			int n;
			
			if (tipo_conex==1){ //UDP
				/* Envio de mensaje al servidor */
				n = send(fd, cadena, tamano,0);
				//puts((char*)cadena);
				if (n < 0) {
				  perror("ERROR sending to socket");
				  //exit(1);
				}
			}
			else
				if (tipo_conex==2){ //TCP
					/* Envio de mensaje al servidor */
					n = write(fd, cadena, tamano);
					//puts((char*)cadena);
					if (n < 0) {
					  perror("ERROR writing to socket");
					  //exit(1);
					}
				}
			
			
			recibir();
		}//Fin de enviar

	/*  void* recibir()
	 *  Funcion de recibir de mensajes al servidor
	 *  retorna el mensaje recibido del servidor, de tipo void *
	 */
		void* recibir(){
			void *mensaje = (void*) malloc(sizeof(void)*100);
			int numbytes;

			
			if (tipo_conex==1){ //TCP
				//puts("entro a recibir");
				//Recv del servidor
				if ((numbytes=recv(fd,mensaje,MAXDATASIZE,0)) == -1){  
					printf("Error en recv() \n");
					//exit(-1);
				}
			}
			else
				if (tipo_conex==2){ //UDP
					//Recv del servido
					if ((numbytes=read(fd,mensaje,MAXDATASIZE)) == -1){ 
						printf("Error en read() \n");
						//exit(-1);
					}

				}
		 	return mensaje;
						
		}

	/*  int create(void *mensaje);
	 *  Permite crear segmentos en el servidor
	 *  recibe por parametro el dato a almacenar 
	 *  retorna 1 si el mensaje fue creado con exito o -1 si hubo errores
	 */
		int create(void* mensaje, long int size){


			enviar("1",strlen("1")); //Enviar opcion escogida al servidor en caracter
			//enviar("1",100);
			enviar(mensaje,size*10);

			printf("%s\n",(char*)mensaje);
			
			if(atoi(recibir())==1)
				return 1; //mensaje guardado exitosamente
			else
				return -1; //No se guardo el mensaje
		}


	/*  void* get(int *indice)
	 *  Permite obtener la informacion de un segmento del servidor
	 *  recibe por parametro el numero de segmento a consultar 
	 *  retorna el mensaje del segmento consultado, de tipo void *
	 */
		void* get(int *indice){ //el num de opcion a obtener(?)
			int retorno = 0;
			//printf("Hola indice: %d", *((int *)indice));
			//sleep(1);
			enviar("2",sizeof("2")); //Enviar opcion escogida al servidor en caracter
			enviar((void *)indice,sizeof(int)*2);
			
			return recibir();   //retorna el mensaje o -1 si no es un indice valido
			
		}

	/*  update(void *mensaje, int *indice)
	 *  Permite actualizar segmentos del servidor
	 *  recibe por parametro la informacion a sustituir y el numero de segmento a reemplazar 
	 *  retorna 1 si el mensaje fue actualizado con exito o -1 si hubo errores
	 */
		int update(void *mensaje, int *indice, long int tamano){ //el num de opcion a borrar(?)
			enviar("3",sizeof("3")); //Enviar opcion escogida al servidor en caracter
			printf("entre al update");
			enviar((void *)indice,sizeof(indice));
			//sleep(1);
			enviar(mensaje,tamano*10);
			return atoi(recibir());   //retorna 1 si es valido o -1 si no es un indice valido
		}


	/*  delete(int *indice);
	 *  Permite eliminar segmentos del servidor
	 *  recibe por parametro el numero del segmento a eliminar 
	 *  retorna 1 si el mensaje fue eliminado con exito o -1 si hubo errores
	 */
		int delete(int *indice){

			enviar("4",sizeof("4")); //Enviar opcion escogida al servidor en caracter
			enviar((void *)indice,sizeof(indice));
			
			return atoi(recibir());   //retorna el mensaje o -1 si no es un indice valido
		}


	/*  length_mem();
	 *  Permite consultar el numero segmentos creados en el servidor
	 *  retorna el numero de segmentos creados, -1 si no contiene segmentos
	 */
		int length_mem(){
			enviar("5",sizeof("5")); //Enviar opcion escogida al servidor en caracter
			return *((int *) recibir());	//retorna la cant de segmentos
		}

		void desconectar(){
		 /* cerramos fd =) */   
			close(fd);  
		}






